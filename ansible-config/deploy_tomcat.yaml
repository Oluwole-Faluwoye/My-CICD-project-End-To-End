---
# =========================
# PLAY 0: Ensure all hosts are in known_hosts
# =========================
- name: Add EC2 hosts to known_hosts dynamically
  hosts: "tag_Environment_{{ environment }}"
  gather_facts: false
  become: false
  tags: [bootstrap]

  tasks:
    - name: Ensure .ssh directory exists for ansible_user
      file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0700'

    - name: Add host key to known_hosts
      known_hosts:
        name: "{{ ansible_host }}"
        key: "{{ lookup('pipe','ssh-keyscan -H ' + ansible_host) }}"
        path: "/home/{{ ansible_user }}/.ssh/known_hosts"
        state: present

# =========================
# PLAY 1: Bootstrap Jenkins public key (idempotent)
# =========================
- name: Ensure Jenkins public key exists on targets (bootstrap once)
  hosts: "tag_Environment_{{ environment }}"
  become: true
  gather_facts: false
  tags: [bootstrap]

  vars:
    jenkins_pub_key: "{{ jenkins_pub_key | default('/home/ansibleadmin/.ssh/id_rsa.pub') }}"
    target_user: "ansibleadmin"

  tasks:
    - name: Ensure {{ target_user }} user exists
      user:
        name: "{{ target_user }}"
        state: present

    - name: Ensure {{ target_user }} .ssh directory exists
      file:
        path: "/home/{{ target_user }}/.ssh"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0700'

    - name: Add Jenkins public key to {{ target_user }} authorized_keys (idempotent)
      authorized_key:
        user: "{{ target_user }}"
        key: "{{ lookup('file', jenkins_pub_key) }}"
        state: present
        manage_dir: false

# =========================
# PLAY 2: Deploy WAR with Jenkins key
# =========================
- name: Deploy webapp to Tomcat
  hosts: "tag_Environment_{{ environment }}"
  become: true
  gather_facts: false
  tags: [deploy]

  vars:
    src_path: "{{ workspace_path }}/webapp/target/webapp.war"
    dest_dir: "/opt/tomcat9/webapps"
    dest_path: "{{ dest_dir }}/webapp.war"

  tasks:
    - name: Ensure Tomcat webapps directory exists
      file:
        path: "{{ dest_dir }}"
        state: directory
        owner: ec2-user
        group: ansibleadmin
        mode: '0775'

    - name: Copy WAR file
      copy:
        src: "{{ src_path }}"
        dest: "{{ dest_path }}"
        owner: ec2-user
        group: ansibleadmin
        mode: '0664'

    - name: Restart Tomcat
      systemd:
        name: tomcat
        state: restarted
        enabled: true

    - name: Wait for Tomcat to start
      wait_for:
        host: "{{ ansible_host | default(inventory_hostname) }}"
        port: 8080
        delay: 10
        timeout: 90

    - name: Verify deployment
      uri:
        url: "http://{{ ansible_host | default(inventory_hostname) }}:8080/webapp/"
        status_code: 200
      register: result
      retries: 5
      delay: 5
      until: result.status == 200
